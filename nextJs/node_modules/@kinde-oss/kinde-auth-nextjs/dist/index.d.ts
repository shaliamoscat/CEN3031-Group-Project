import React from 'react';

declare function isTokenValid(token: any): boolean;

declare function useKindeBrowserClient(): any;

type KindeAccessToken = {
  aud: string[];
  azp: number;
  iat: number;
  iss: string;
  jti: string;
  org_code: string;
  permissions: KindePermissions;
  scp: string[];
  sub: string;
};

type KindeIdToken = {
  at_hash: string;
  aud: string[];
  auth_time: number;
  azp: string;
  email: string;
  exp: number;
  family_name: string;
  given_name: string;
  iat: number;
  iss: string;
  jti: string;
  name: string;
  org_codes: string[];
  sub: string;
  updated_at: number;
};

type KindeUser = {
  id: string;
  email: string | null;
  given_name: string | null;
  family_name: string | null;
  picture: string | null;
};

type KindePermissions = {
  permissions: string[];
  orgCode: string | null;
};

type KindeFlagTypeCode = 'b' | 'i' | 's';

type KindeFlagTypeValue = 'boolean' | 'integer' | 'string';

type KindeFlag = {
  code: string;
  type: KindeFlagTypeValue | null;
  value: any;
  defaultValue: any | null;
  is_default: boolean;
};

type KindeOrganization = {
  orgCode: string | null;
};

type KindeOrganizations = {
  orgCodes: string[];
};

type KindeState = {
  accessToken: KindeAccessToken | null;
  error?: string | null;
  idToken: KindeIdToken | null;
  isAuthenticated: boolean | null;
  isLoading: boolean | null;
  organization: KindeOrganization;
  permissions: KindePermissions;
  user: KindeUser | null;
  userOrganizations: KindeOrganizations;
  getAccessToken: () => KindeAccessToken | null;
  getBooleanFlag: (
    code: string,
    defaultValue: boolean
  ) => boolean | null | undefined;
  getClaim: (
    claim: string,
    tokenKey?: 'access_token' | 'id_token'
  ) => {name: string; value: string} | null;
  getFlag: (
    code: string,
    defaultValue: string | number | boolean,
    flagType: KindeFlagTypeCode
  ) => KindeFlag | null;
  getIdToken: () => KindeIdToken | null;
  getIntegerFlag: (
    code: string,
    defaultValue: number
  ) => number | null | undefined;
  getOrganization: () => KindeOrganization;
  getPermission: (
    key: string
  ) => {isGranted: boolean; orgCode: string | null} | null;
  getPermissions: () => KindePermissions;
  getStringFlag: (
    code: string,
    defaultValue: string
  ) => string | null | undefined;
  getToken: () => string | null;
  getUser: () => KindeUser | null;
  getUserOrganizations: () => KindeOrganizations | null;
};

declare function useKindeAuth(): KindeState;
declare function KindeProvider({ children }: {
    children: React.ReactNode;
}): React.JSX.Element;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgCode]
 * @prop {string} [postLoginRedirectURL]
 * @prop {Object.<string, string>} [authUrlParams]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function RegisterLink({ children, orgCode, postLoginRedirectURL, authUrlParams, ...props }: Props$3): React.JSX.Element;
type PropsType$3 = {
    children: React.ReactNode;
    orgCode?: string;
    postLoginRedirectURL?: string;
    authUrlParams?: {
        [x: string]: string;
    };
};
type Props$3 = PropsType$3 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgCode]
 * @prop {string} [postLoginRedirectURL]
 * @prop {Object.<string, string>} [authUrlParams]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function LoginLink({ children, postLoginRedirectURL, orgCode, authUrlParams, ...props }: Props$2): React.JSX.Element;
type PropsType$2 = {
    children: React.ReactNode;
    orgCode?: string;
    postLoginRedirectURL?: string;
    authUrlParams?: {
        [x: string]: string;
    };
};
type Props$2 = PropsType$2 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function LogoutLink({ children, ...props }: Props$1): React.JSX.Element;
type PropsType$1 = {
    children: React.ReactNode;
};
type Props$1 = PropsType$1 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgName]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function CreateOrgLink({ children, orgName, ...props }: Props): React.JSX.Element;
type PropsType = {
    children: React.ReactNode;
    orgName?: string;
};
type Props = PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>;

export { CreateOrgLink, KindeProvider, LoginLink, LogoutLink, RegisterLink, isTokenValid, useKindeAuth, useKindeBrowserClient };
