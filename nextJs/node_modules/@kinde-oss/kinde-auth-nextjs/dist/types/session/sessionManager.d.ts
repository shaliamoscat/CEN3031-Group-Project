export function sessionManager(req?: Request, res?: Response): {
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<string | undefined>}
     */
    getSessionItem: (itemKey: string) => Promise<string | undefined>;
    /**
     *
     * @param {string} itemKey
     * @param {string | object} itemValue
     * @returns {Promise<void>}
     */
    setSessionItem: (itemKey: string, itemValue: string | object) => Promise<void>;
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<void>}
     */
    removeSessionItem: (itemKey: string) => Promise<void>;
    destroySession: () => void;
};
export function appRouterSessionManager(cookieStore: any): {
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<string | undefined>}
     */
    getSessionItem: (itemKey: string) => Promise<string | undefined>;
    /**
     *
     * @param {string} itemKey
     * @param {string | object} itemValue
     * @returns {Promise<void>}
     */
    setSessionItem: (itemKey: string, itemValue: string | object) => Promise<void>;
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<void>}
     */
    removeSessionItem: (itemKey: string) => Promise<void>;
    destroySession: () => void;
};
export function pageRouterSessionManager(req: any, res: any): {
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<string | undefined>}
     */
    getSessionItem: (itemKey: string) => Promise<string | undefined>;
    /**
     *
     * @param {string} itemKey -
     * @param {string | object} itemValue
     * @returns {Promise<void>}
     */
    setSessionItem: (itemKey: string, itemValue: string | object) => Promise<void>;
    /**
     *
     * @param {string} itemKey
     * @returns {Promise<void>}
     */
    removeSessionItem: (itemKey: string) => Promise<void>;
    destroySession: () => void;
};
//# sourceMappingURL=sessionManager.d.ts.map