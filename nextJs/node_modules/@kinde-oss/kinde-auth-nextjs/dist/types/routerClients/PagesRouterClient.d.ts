export default class PagesRouterClient {
    constructor(req: any, res: any);
    kindeClient: {
        handleRedirectToApp: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, callbackURL: URL) => Promise<void>;
        isAuthenticated: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<boolean>;
        getUserProfile: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<import("@kinde-oss/kinde-typescript-sdk").UserType>;
        createOrg: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions) => Promise<URL>;
        getToken: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<string>;
        register: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions) => Promise<URL>;
        getUser: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<import("@kinde-oss/kinde-typescript-sdk").UserType>;
        logout: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<URL>;
        login: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions) => Promise<URL>;
        getUserOrganizations: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            orgCodes: string[];
        }>;
        getOrganization: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            orgCode: string;
        }>;
        getBooleanFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: boolean) => Promise<boolean>;
        getIntegerFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: number) => Promise<number>;
        getPermissions: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            permissions: string[];
            orgCode: string;
        }>;
        getPermission: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, name: string) => Promise<{
            orgCode: string;
            isGranted: boolean;
        }>;
        getClaimValue: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType) => Promise<unknown>;
        getStringFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: string) => Promise<string>;
        getClaim: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType) => Promise<{
            name: string;
            value: unknown;
        }>;
        getFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: string | number | boolean, type?: keyof import("@kinde-oss/kinde-typescript-sdk").FlagType) => Promise<import("@kinde-oss/kinde-typescript-sdk").GetFlagType>;
    } | {
        isAuthenticated: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<boolean>;
        getToken: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<string>;
        logout: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<URL>;
        getUserOrganizations: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            orgCodes: string[];
        }>;
        getOrganization: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            orgCode: string;
        }>;
        getBooleanFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: boolean) => Promise<boolean>;
        getIntegerFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: number) => Promise<number>;
        getPermissions: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager) => Promise<{
            permissions: string[];
            orgCode: string;
        }>;
        getPermission: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, name: string) => Promise<{
            orgCode: string;
            isGranted: boolean;
        }>;
        getClaimValue: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType) => Promise<unknown>;
        getStringFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: string) => Promise<string>;
        getClaim: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType) => Promise<{
            name: string;
            value: unknown;
        }>;
        getFlag: (sessionManager: import("@kinde-oss/kinde-typescript-sdk").SessionManager, code: string, defaultValue?: string | number | boolean, type?: keyof import("@kinde-oss/kinde-typescript-sdk").FlagType) => Promise<import("@kinde-oss/kinde-typescript-sdk").GetFlagType>;
    };
    url: URL;
    res: any;
    req: any;
    searchParams: URLSearchParams;
    sessionManager: {
        getSessionItem: (itemKey: string) => Promise<string>;
        setSessionItem: (itemKey: string, itemValue: any) => Promise<void>;
        removeSessionItem: (itemKey: string) => Promise<void>;
        destroySession: () => void;
    };
    redirect(url: any): any;
    getUrl(): URL;
    json(data: any, status?: number): any;
    getSearchParam(key: any): string;
}
//# sourceMappingURL=PagesRouterClient.d.ts.map