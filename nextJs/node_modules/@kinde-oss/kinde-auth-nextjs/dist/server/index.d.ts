import * as next from 'next';
import { UsersApi, OAuthApi, SubscribersApi, OrganizationsApi, ConnectedAppsApi, FeatureFlagsApi, EnvironmentsApi, PermissionsApi, RolesApi, BusinessApi, IndustriesApi, TimezonesApi, ApplicationsApi, CallbacksApi, APIsApi } from '@kinde-oss/kinde-typescript-sdk';
import React from 'react';

type KindeAccessToken = {
  aud: string[];
  azp: number;
  iat: number;
  iss: string;
  jti: string;
  org_code: string;
  permissions: KindePermissions;
  scp: string[];
  sub: string;
};

type KindeIdToken = {
  at_hash: string;
  aud: string[];
  auth_time: number;
  azp: string;
  email: string;
  exp: number;
  family_name: string;
  given_name: string;
  iat: number;
  iss: string;
  jti: string;
  name: string;
  org_codes: string[];
  sub: string;
  updated_at: number;
};

type KindeUser = {
  id: string;
  email: string | null;
  given_name: string | null;
  family_name: string | null;
  picture: string | null;
};

type KindePermissions = {
  permissions: string[];
  orgCode: string | null;
};

type KindePermission = {
  isGranted: boolean;
  orgCode: string | null;
};

type KindeFlagTypeCode = 'b' | 'i' | 's';

type KindeFlagTypeValue = 'boolean' | 'integer' | 'string';

type KindeFlag = {
  code: string;
  type: KindeFlagTypeValue | null;
  value: any;
  defaultValue: any | null;
  is_default: boolean;
};

type KindeOrganization = {
  orgCode: string | null;
};

type KindeOrganizations = {
  orgCodes: string[];
};

type getUserOrganizations = () => Promise<KindeOrganizations | null>;

type getUser = () => Promise<KindeUser | null>;

type getStringFlag = (code: string, defaultValue: string) => Promise<string | null>;

type getPermissions = () => Promise<KindePermissions | null>;

type getPermission = (name: string) => Promise<KindePermission | null>;

type getOrganization = () => Promise<KindeOrganization | null>;

type getIntegerFlag = (code: string, defaultValue: number) => Promise<number | null>;

type getIdToken = () => Promise<KindeIdToken>;

type getFlag = (code: string, defaultValue: boolean | number | string, flagType: KindeFlagTypeCode) => Promise<KindeFlag | {
    value: boolean | number | string;
}>;

type getBooleanFlag = (code: string, defaultValue: boolean) => Promise<boolean | null>;

type getAccessToken = () => Promise<KindeAccessToken | undefined>;

/**
 *
 * @param {import('next').NextApiRequest} [req]
 * @param {import('next').NextApiResponse} [res]
 * @returns
 */
declare function _default$1(req?: next.NextApiRequest, res?: next.NextApiResponse): {
    getAccessToken: getAccessToken;
    getBooleanFlag: getBooleanFlag;
    getFlag: getFlag;
    getIdToken: getIdToken;
    getIntegerFlag: getIntegerFlag;
    getOrganization: getOrganization;
    getPermission: getPermission;
    getPermissions: getPermissions;
    getStringFlag: getStringFlag;
    getUser: getUser;
    getUserOrganizations: getUserOrganizations;
    isAuthenticated: () => Promise<boolean>;
};

declare function createKindeManagementAPIClient(req?: Request | NextApiRequest, res?: Response | NextApiResponse): Promise<{
    usersApi: UsersApi;
    oauthApi: OAuthApi;
    subscribersApi: SubscribersApi;
    organizationsApi: OrganizationsApi;
    connectedAppsApi: ConnectedAppsApi;
    featureFlagsApi: FeatureFlagsApi;
    environmentsApi: EnvironmentsApi;
    permissionsApi: PermissionsApi;
    rolesApi: RolesApi;
    businessApi: BusinessApi;
    industriesApi: IndustriesApi;
    timezonesApi: TimezonesApi;
    applicationsApi: ApplicationsApi;
    callbacksApi: CallbacksApi;
    apisApi: APIsApi;
}>;

declare function _default(request?: object, endpoint?: string): Promise<any> | ((req?: Request, res?: Response) => Response);
//# sourceMappingURL=auth.d.ts.map

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgCode]
 * @prop {string} [postLoginRedirectURL]
 * @prop {Object.<string, string>} [authUrlParams]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function RegisterLink({ children, orgCode, postLoginRedirectURL, authUrlParams, ...props }: Props$3): React.JSX.Element;
type PropsType$3 = {
    children: React.ReactNode;
    orgCode?: string;
    postLoginRedirectURL?: string;
    authUrlParams?: {
        [x: string]: string;
    };
};
type Props$3 = PropsType$3 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgCode]
 * @prop {string} [postLoginRedirectURL]
 * @prop {Object.<string, string>} [authUrlParams]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function LoginLink({ children, postLoginRedirectURL, orgCode, authUrlParams, ...props }: Props$2): React.JSX.Element;
type PropsType$2 = {
    children: React.ReactNode;
    orgCode?: string;
    postLoginRedirectURL?: string;
    authUrlParams?: {
        [x: string]: string;
    };
};
type Props$2 = PropsType$2 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function LogoutLink({ children, ...props }: Props$1): React.JSX.Element;
type PropsType$1 = {
    children: React.ReactNode;
};
type Props$1 = PropsType$1 & React.AnchorHTMLAttributes<HTMLAnchorElement>;

/**
 * @typedef {Object} PropsType
 * @prop {React.ReactNode} children
 * @prop {string} [orgName]
 *
 * @typedef {PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>} Props
 */
/**
 * @param {Props} props
 */
declare function CreateOrgLink({ children, orgName, ...props }: Props): React.JSX.Element;
type PropsType = {
    children: React.ReactNode;
    orgName?: string;
};
type Props = PropsType & React.AnchorHTMLAttributes<HTMLAnchorElement>;

export { CreateOrgLink, LoginLink, LogoutLink, RegisterLink, createKindeManagementAPIClient, _default$1 as getKindeServerSession, _default as handleAuth };
