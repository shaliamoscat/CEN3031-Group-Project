"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utilities = __importStar(require("../../utilities/index.js"));
const withAuthUtilities = (isAuthenticated) => {
    const { featureFlags, tokenClaims } = utilities;
    /**
     * Method extracts the provided number feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {number} defaultValue
     * @returns {number} integer flag value
     */
    const getIntegerFlag = async (sessionManager, code, defaultValue) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return integer flag "${code}", no authentication credential found`);
        }
        return await featureFlags.getIntegerFlag(sessionManager, code, defaultValue);
    };
    /**
     * Method extracts the provided string feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {string} defaultValue
     * @returns {string} string flag value
     */
    const getStringFlag = async (sessionManager, code, defaultValue) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return string flag "${code}", no authentication credential found`);
        }
        return await featureFlags.getStringFlag(sessionManager, code, defaultValue);
    };
    /**
     * Method extracts the provided boolean feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {boolean} defaultValue
     * @returns {boolean} boolean flag value
     */
    const getBooleanFlag = async (sessionManager, code, defaultValue) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return boolean flag "${code}", no authentication credential found`);
        }
        return await featureFlags.getBooleanFlag(sessionManager, code, defaultValue);
    };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session.
     * @param {SessionManager} sessionManager
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {unknown | null}
     */
    const getClaimValue = async (sessionManager, claim, type = 'access_token') => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return claim "${claim}", no authentication credential found`);
        }
        return tokenClaims.getClaimValue(sessionManager, claim, type);
    };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session, the returned object includes the provided claim.
     * @param {SessionManager} sessionManager
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {{ name: string, value: unknown | null }}
     */
    const getClaim = async (sessionManager, claim, type = 'access_token') => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return claim "${claim}", no authentication credential found`);
        }
        return await tokenClaims.getClaim(sessionManager, claim, type);
    };
    /**
     * Method returns the organization code from the current session and returns
     * a boolean in the returned object indicating if the provided permission is
     * present in the session.
     * @param {SessionManager} sessionManager
     * @param {string} name
     * @returns {{ orgCode: string | null, isGranted: boolean }}
     */
    const getPermission = async (sessionManager, name) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return permission "${name}", no authentication credential found`);
        }
        return await tokenClaims.getPermission(sessionManager, name);
    };
    /**
     * Method extracts the organization code from the current session.
     * @param {SessionManager} sessionManager
     * @returns {{ orgCode: string | null }}
     */
    const getOrganization = async (sessionManager) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error('Cannot return user organization, no authentication credential found');
        }
        return await tokenClaims.getOrganization(sessionManager);
    };
    /**
     * Method extracts all organization codes from the id token in the current
     * session.
     * @param {SessionManager} sessionManager
     * @returns {{ orgCodes: string[] }}
     */
    const getUserOrganizations = async (sessionManager) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error('Cannot return user organizations, no authentication credential found');
        }
        return await tokenClaims.getUserOrganizations(sessionManager);
    };
    /**
     * Method extracts all the permission and the organization code in the access
     * token in the current session.
     * @param {SessionManager} sessionManager
     * @returns {{ permissions: string[], orgCode: string | null }}
     */
    const getPermissions = async (sessionManager) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error('Cannot return user permissions, no authentication credential found');
        }
        return await tokenClaims.getPermissions(sessionManager);
    };
    /**
     * Method extracts the provided feature flag from the access token in the
     * current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {FlagType[keyof FlagType]} defaultValue
     * @param {keyof FlagType} type
     * @returns {GetFlagType}
     */
    const getFlag = async (sessionManager, code, defaultValue, type) => {
        if (!(await isAuthenticated(sessionManager))) {
            throw new Error(`Cannot return flag "${code}", no authentication credential found`);
        }
        return await featureFlags.getFlag(sessionManager, code, defaultValue, type);
    };
    return {
        getUserOrganizations,
        getOrganization,
        getBooleanFlag,
        getIntegerFlag,
        getPermissions,
        getPermission,
        getClaimValue,
        getStringFlag,
        getClaim,
        getFlag,
    };
};
exports.default = withAuthUtilities;
