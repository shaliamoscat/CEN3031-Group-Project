"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBooleanFlag = exports.getStringFlag = exports.getIntegerFlag = exports.getFlag = void 0;
const token_claims_js_1 = require("./token-claims.js");
const types_js_1 = require("./types.js");
/**
 * Method extracts the provided feature flag from the access token in the
 * current session.
 * @param {SessionManager} sessionManager
 * @param {string} code
 * @param {FlagType[keyof FlagType]} defaultValue
 * @param {keyof FlagType} type
 * @returns {GetFlagType}
 */
const getFlag = async (sessionManager, code, defaultValue, type) => {
    const featureFlags = (await (0, token_claims_js_1.getClaimValue)(sessionManager, 'feature_flags')) ??
        {};
    const flag = featureFlags[code];
    if (!flag && defaultValue === undefined) {
        throw new Error(`Flag ${code} was not found, and no default value has been provided`);
    }
    if (flag?.t && type && type !== flag?.t) {
        throw new Error(`Flag ${code} is of type ${types_js_1.FlagDataType[flag.t]}, expected type is ${types_js_1.FlagDataType[type]}`);
    }
    const response = {
        is_default: flag?.v === undefined,
        value: flag?.v ?? defaultValue,
        code,
    };
    if (!response.is_default) {
        response.type = types_js_1.FlagDataType[flag?.t ?? type];
    }
    return response;
};
exports.getFlag = getFlag;
/**
 * Method extracts the provided number feature flag from the access token in
 * the current session.
 * @param {SessionManager} sessionManager
 * @param {string} code
 * @param {number} defaultValue
 * @returns {number} integer flag value
 */
const getIntegerFlag = async (sessionManager, code, defaultValue) => {
    return (await (0, exports.getFlag)(sessionManager, code, defaultValue, 'i'))
        .value;
};
exports.getIntegerFlag = getIntegerFlag;
/**
 * Method extracts the provided string feature flag from the access token in
 * the current session.
 * @param {SessionManager} sessionManager
 * @param {string} code
 * @param {string} defaultValue
 * @returns {string} string flag value
 */
const getStringFlag = async (sessionManager, code, defaultValue) => {
    return (await (0, exports.getFlag)(sessionManager, code, defaultValue, 's'))
        .value;
};
exports.getStringFlag = getStringFlag;
/**
 * Method extracts the provided boolean feature flag from the access token in
 * the current session.
 * @param {SessionManager} sessionManager
 * @param {string} code
 * @param {boolean} defaultValue
 * @returns {boolean} boolean flag value
 */
const getBooleanFlag = async (sessionManager, code, defaultValue) => {
    return (await (0, exports.getFlag)(sessionManager, code, defaultValue, 'b'))
        .value;
};
exports.getBooleanFlag = getBooleanFlag;
