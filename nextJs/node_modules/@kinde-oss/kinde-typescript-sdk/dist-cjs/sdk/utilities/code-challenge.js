"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupCodeChallenge = exports.sha256 = exports.base64UrlEncode = void 0;
const random_string_js_1 = require("./random-string.js");
const uncrypto_1 = require("uncrypto");
/**
 * Encodes the provided ArrayBuffer string to base-64 format.
 * @param {ArrayBuffer} str
 * @returns {string}
 */
const base64UrlEncode = (str) => {
    return btoa(String.fromCharCode(...new Uint8Array(str)))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
};
exports.base64UrlEncode = base64UrlEncode;
/**
 * Creates a one-way hash for the provided string using SHA-256
 * algorithm, the result is provided as an ArrayBuffer instance.
 * @param {string} plain
 * @returns {Promise<ArrayBuffer>}
 */
const sha256 = async (plain) => {
    const encoder = new TextEncoder();
    const data = encoder.encode(plain);
    return await uncrypto_1.subtle.digest('SHA-256', data);
};
exports.sha256 = sha256;
/**
 * Sets up the code challenge required for PKCE OAuth2.0 flow
 * returning the verifier (secret) and its corresponding one-way
 * hash (challenge).
 * @returns {Promise<{ challenge: string, verifier: string }>}
 */
const setupCodeChallenge = async () => {
    const secret = (0, random_string_js_1.generateRandomString)(50);
    const challenge = (0, exports.base64UrlEncode)(await (0, exports.sha256)(secret));
    return { challenge, verifier: secret };
};
exports.setupCodeChallenge = setupCodeChallenge;
