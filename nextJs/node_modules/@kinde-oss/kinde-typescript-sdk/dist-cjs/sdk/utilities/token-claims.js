"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserOrganizations = exports.getPermissions = exports.getOrganization = exports.getPermission = exports.getClaim = exports.getClaimValue = void 0;
/**
 * Method extracts the provided claim from the provided token type in the
 * current session.
 * @param {SessionManager} sessionManager
 * @param {string} claim
 * @param {ClaimTokenType} type
 * @returns {unknown | null}
 */
const getClaimValue = async (sessionManager, claim, type = 'access_token') => {
    const tokenPayload = (await sessionManager.getSessionItem(`${type}_payload`));
    return tokenPayload[claim] ?? null;
};
exports.getClaimValue = getClaimValue;
/**
 * Method extracts the provided claim from the provided token type in the
 * current session, the returned object includes the provided claim.
 * @param {SessionManager} sessionManager
 * @param {string} claim
 * @param {ClaimTokenType} type
 * @returns {{ name: string, value: unknown | null }}
 */
const getClaim = async (sessionManager, claim, type = 'access_token') => {
    return {
        name: claim,
        value: await (0, exports.getClaimValue)(sessionManager, claim, type),
    };
};
exports.getClaim = getClaim;
/**
 * Method returns the organization code from the current session and returns
 * a boolean in the returned object indicating if the provided permission is
 * present in the session.
 * @param {SessionManager} sessionManager
 * @param {string} name
 * @returns {{ orgCode: string | null, isGranted: boolean }}
 */
const getPermission = async (sessionManager, name) => {
    const permissions = ((await (0, exports.getClaimValue)(sessionManager, 'permissions')) ??
        []);
    const isGranted = permissions.some((p) => p === name);
    const orgCode = (await (0, exports.getClaimValue)(sessionManager, 'org_code'));
    return { orgCode, isGranted };
};
exports.getPermission = getPermission;
/**
 * Method extracts the organization code from the current session.
 * @param {SessionManager} sessionManager
 * @returns {{ orgCode: string | null }}
 */
const getOrganization = async (sessionManager) => ({
    orgCode: (await (0, exports.getClaimValue)(sessionManager, 'org_code')),
});
exports.getOrganization = getOrganization;
/**
 * Method extracts all the permission and the organization code in the access
 * token in the current session.
 * @param {SessionManager} sessionManager
 * @returns {{ permissions: string[], orgCode: string | null }}
 */
const getPermissions = async (sessionManager) => {
    const [permissions, orgCode] = await Promise.all([
        ((0, exports.getClaimValue)(sessionManager, 'permissions') ?? []),
        (0, exports.getClaimValue)(sessionManager, 'org_code'),
    ]);
    return {
        permissions,
        orgCode,
    };
};
exports.getPermissions = getPermissions;
/**
 * Method extracts all organization codes from the id token in the current
 * session.
 * @param {SessionManager} sessionManager
 * @returns {{ orgCodes: string[] }}
 */
const getUserOrganizations = async (sessionManager) => ({
    orgCodes: ((await (0, exports.getClaimValue)(sessionManager, 'org_codes', 'id_token')) ??
        []),
});
exports.getUserOrganizations = getUserOrganizations;
