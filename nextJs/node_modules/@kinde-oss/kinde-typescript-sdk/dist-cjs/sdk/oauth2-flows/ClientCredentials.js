"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCredentials = void 0;
const utilities = __importStar(require("../utilities/index.js"));
const version_js_1 = require("../version.js");
/**
 * Class provides implementation for the client credentials OAuth2.0 flow.
 * @class ClientCredentials
 */
class ClientCredentials {
    config;
    static DEFAULT_TOKEN_SCOPES = 'openid profile email offline';
    logoutEndpoint;
    tokenEndpoint;
    constructor(config) {
        this.config = config;
        const { authDomain, logoutRedirectURL } = config;
        this.logoutEndpoint = `${authDomain}/logout?redirect=${logoutRedirectURL}`;
        this.tokenEndpoint = `${authDomain}/oauth2/token`;
        this.config = config;
    }
    /**
     * Method retrieves the access token, if the token present in the current session
     * is unexpired it will be returned otherwise, a new one will be be obtained by
     * performing a network call.
     * @param {SessionManager} sessionManager
     * @returns {Promise<string>}
     */
    async getToken(sessionManager) {
        const accessToken = await utilities.getAccessToken(sessionManager);
        const isTokenExpired = utilities.isTokenExpired(accessToken);
        if (accessToken && !isTokenExpired) {
            return accessToken;
        }
        const payload = await this.fetchAccessTokenFor(sessionManager);
        await utilities.commitTokenToMemory(sessionManager, payload.access_token, 'access_token');
        return payload.access_token;
    }
    /**
     * Method implements logic for requesting access token using token endpoint.
     * @param {SessionManager} sessionManager
     * @returns {Promise<OAuth2CCTokenResponse>}
     */
    async fetchAccessTokenFor(sessionManager) {
        const body = this.generateTokenURLParams();
        const headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        headers.append(...(0, version_js_1.getSDKHeader)({
            frameworkVersion: this.config.frameworkVersion,
            framework: this.config.framework,
        }));
        const config = { method: 'POST', headers, body };
        const response = await fetch(this.tokenEndpoint, config);
        const payload = (await response.json());
        const errorPayload = payload;
        if (errorPayload.error) {
            await sessionManager.destroySession();
            const errorDescription = errorPayload.error_description;
            const message = errorDescription ?? errorPayload.error;
            throw new Error(message);
        }
        return payload;
    }
    /**
     * Method returns a boolean indicating if the access token in session is expired
     * or not, in the event the token is expired it makes use of the `getToken` method
     * above to first refresh it, in the event refresh fails false is returned.
     * @param sessionManager
     * @returns {Promise<boolean>}
     */
    async isAuthenticated(sessionManager) {
        try {
            await this.getToken(sessionManager);
            return true;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Method provides the query params required for generating the token URL for
     * obtaining the required access token.
     * @returns {URLSearchParams}
     */
    generateTokenURLParams() {
        const searchParams = new URLSearchParams({
            grant_type: 'client_credentials',
            scope: this.config.scope ?? ClientCredentials.DEFAULT_TOKEN_SCOPES,
            client_id: this.config.clientId,
            client_secret: this.config.clientSecret,
        });
        if (this.config.audience) {
            searchParams.append('audience', this.config.audience);
        }
        return new URLSearchParams(searchParams);
    }
}
exports.ClientCredentials = ClientCredentials;
