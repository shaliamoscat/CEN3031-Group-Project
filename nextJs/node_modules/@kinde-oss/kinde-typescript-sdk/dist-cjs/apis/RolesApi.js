"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRolesSortEnum = exports.GetRolePermissionSortEnum = exports.RolesApi = void 0;
const runtime = __importStar(require("../runtime.js"));
const index_js_1 = require("../models/index.js");
/**
 *
 */
class RolesApi extends runtime.BaseAPI {
    /**
     * Create role.
     * Create Role
     */
    async createRoleRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_js_1.CreateRoleRequestToJSON)(requestParameters.createRoleRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Create role.
     * Create Role
     */
    async createRole(requestParameters = {}, initOverrides) {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete role
     * Delete Role
     */
    async deleteRoleRaw(requestParameters, initOverrides) {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling deleteRole.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Delete role
     * Delete Role
     */
    async deleteRole(requestParameters, initOverrides) {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get permissions for a role.
     * Get Role Permissions
     */
    async getRolePermissionRaw(requestParameters, initOverrides) {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling getRolePermission.');
        }
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}/permissions`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_js_1.RolesPermissionResponseInnerFromJSON));
    }
    /**
     * Get permissions for a role.
     * Get Role Permissions
     */
    async getRolePermission(requestParameters, initOverrides) {
        const response = await this.getRolePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Roles
     */
    async getRolesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.GetRolesResponseFromJSON)(jsonValue));
    }
    /**
     * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Roles
     */
    async getRoles(requestParameters = {}, initOverrides) {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Remove a permission from a role.
     * Remove Role Permission
     */
    async removeRolePermissionRaw(requestParameters, initOverrides) {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling removeRolePermission.');
        }
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId', 'Required parameter requestParameters.permissionId was null or undefined when calling removeRolePermission.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}/permissions/{permission_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))).replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Remove a permission from a role.
     * Remove Role Permission
     */
    async removeRolePermission(requestParameters, initOverrides) {
        const response = await this.removeRolePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update role permissions.
     * Update Role Permissions
     */
    async updateRolePermissionsRaw(requestParameters, initOverrides) {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling updateRolePermissions.');
        }
        if (requestParameters.updateRolePermissionsRequest === null || requestParameters.updateRolePermissionsRequest === undefined) {
            throw new runtime.RequiredError('updateRolePermissionsRequest', 'Required parameter requestParameters.updateRolePermissionsRequest was null or undefined when calling updateRolePermissions.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}/permissions`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_js_1.UpdateRolePermissionsRequestToJSON)(requestParameters.updateRolePermissionsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.UpdateRolePermissionsResponseFromJSON)(jsonValue));
    }
    /**
     * Update role permissions.
     * Update Role Permissions
     */
    async updateRolePermissions(requestParameters, initOverrides) {
        const response = await this.updateRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update a role
     * Update Role
     */
    async updateRolesRaw(requestParameters, initOverrides) {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling updateRoles.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_js_1.UpdateRolesRequestToJSON)(requestParameters.updateRolesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_js_1.SuccessResponseFromJSON)(jsonValue));
    }
    /**
     * Update a role
     * Update Role
     */
    async updateRoles(requestParameters, initOverrides) {
        const response = await this.updateRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.RolesApi = RolesApi;
/**
 * @export
 */
exports.GetRolePermissionSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
};
/**
 * @export
 */
exports.GetRolesSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
};
