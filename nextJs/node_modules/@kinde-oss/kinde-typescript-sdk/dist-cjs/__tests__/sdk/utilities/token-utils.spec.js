"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocks = __importStar(require("../../mocks"));
const utilities_1 = require("../../../sdk/utilities");
describe('token-utils', () => {
    const domain = 'local-testing@kinde.com';
    const { sessionManager } = mocks;
    describe('commitTokensToMemory', () => {
        it('stores all provided tokens to memory', async () => {
            const { token: mockAccessToken } = mocks.getMockAccessToken(domain);
            const { token: mockIdToken } = mocks.getMockAccessToken(domain);
            const tokenCollection = {
                refresh_token: 'refresh_token',
                access_token: mockAccessToken,
                id_token: mockIdToken,
            };
            await (0, utilities_1.commitTokensToMemory)(sessionManager, tokenCollection);
            expect(await sessionManager.getSessionItem('refresh_token')).toBe(tokenCollection.refresh_token);
            expect(await sessionManager.getSessionItem('access_token')).toBe(mockAccessToken);
            expect(await sessionManager.getSessionItem('id_token')).toBe(mockIdToken);
        });
    });
    describe('commitTokenToMemory()', () => {
        afterEach(async () => {
            await sessionManager.destroySession();
        });
        it('stores provided token to memory', async () => {
            const { token: mockAccessToken } = mocks.getMockAccessToken(domain);
            await (0, utilities_1.commitTokenToMemory)(sessionManager, mockAccessToken, 'access_token');
            expect(await sessionManager.getSessionItem('access_token')).toBe(mockAccessToken);
        });
        it('stores user information if provide token is an id token', async () => {
            const { token: mockIdToken, payload: idTokenPayload } = mocks.getMockIdToken(domain);
            await (0, utilities_1.commitTokenToMemory)(sessionManager, mockIdToken, 'id_token');
            const storedUser = await sessionManager.getSessionItem('user');
            const expectedUser = {
                family_name: idTokenPayload.family_name,
                given_name: idTokenPayload.given_name,
                email: idTokenPayload.email,
                id: idTokenPayload.sub,
                picture: null,
            };
            expect(await sessionManager.getSessionItem('id_token')).toBe(mockIdToken);
            expect(storedUser).toStrictEqual(expectedUser);
        });
    });
    describe('isTokenExpired()', () => {
        it('returns true if null is provided as argument', () => {
            expect((0, utilities_1.isTokenExpired)(null)).toBe(true);
        });
        it('returns true if provided token is expired', () => {
            const { token: mockAccessToken } = mocks.getMockAccessToken(domain, true);
            expect((0, utilities_1.isTokenExpired)(mockAccessToken)).toBe(true);
        });
        it('returns false if provided token is not expired', () => {
            const { token: mockAccessToken } = mocks.getMockAccessToken(domain);
            expect((0, utilities_1.isTokenExpired)(mockAccessToken)).toBe(false);
        });
    });
});
