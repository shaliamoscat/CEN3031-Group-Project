"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocks = __importStar(require("../../mocks"));
const utilities_1 = require("../../../sdk/utilities");
describe('feature-flags', () => {
    let mockAccessToken;
    const { sessionManager } = mocks;
    beforeEach(async () => {
        mockAccessToken = mocks.getMockAccessToken();
        await sessionManager.setSessionItem('access_token_payload', mockAccessToken.payload);
        await sessionManager.setSessionItem('access_token', mockAccessToken.token);
    });
    afterEach(async () => {
        await sessionManager.destroySession();
    });
    describe('getFlag', () => {
        it('throws error if no flag is found no defaultValue is given', async () => {
            const code = 'non-existant-code';
            await expect(async () => await (0, utilities_1.getFlag)(sessionManager, code)).rejects.toThrowError(new Error(`Flag ${code} was not found, and no default value has been provided`));
        });
        it('throw error if provided type is different from typeof of found flag', async () => {
            const featureFlags = mockAccessToken.payload
                .feature_flags;
            const code = 'is_dark_mode';
            const flag = featureFlags[code];
            await expect(async () => await (0, utilities_1.getFlag)(sessionManager, code, true, 's')).rejects.toThrowError(new Error(`Flag ${code} is of type ${utilities_1.FlagDataType[flag.t]}, expected type is ${utilities_1.FlagDataType.s}`));
        });
        it('should not throw error for falsy default value which is not `undefined`', () => {
            const code = 'non-existant-code';
            const getFlagFnArray = [
                async () => await (0, utilities_1.getFlag)(sessionManager, code, false, 'b'),
                async () => await (0, utilities_1.getFlag)(sessionManager, code, '', 's'),
                async () => await (0, utilities_1.getFlag)(sessionManager, code, 0, 'i'),
            ];
            getFlagFnArray.forEach((getFlagFn) => {
                expect(getFlagFn).not.toThrow();
            });
        });
        it('provide result contains no type if default-value is used', async () => {
            const defaultValue = 'default-value';
            const code = 'non-existant-code';
            expect(await (0, utilities_1.getFlag)(sessionManager, code, defaultValue)).toStrictEqual({
                value: defaultValue,
                is_default: true,
                code,
            });
        });
        it('retrieves flag data for a defined feature flag', async () => {
            const featureFlags = mockAccessToken.payload
                .feature_flags;
            for (const code in featureFlags) {
                const flag = featureFlags[code];
                expect(await (0, utilities_1.getFlag)(sessionManager, code)).toStrictEqual({
                    is_default: false,
                    value: flag.v,
                    type: utilities_1.FlagDataType[flag.t],
                    code,
                });
            }
        });
    });
});
