/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import type { AddOrganizationUsersRequest, AddOrganizationUsersResponse, CreateOrganizationRequest, CreateOrganizationResponse, CreateOrganizationUserPermissionRequest, CreateOrganizationUserRoleRequest, GetOrganizationFeatureFlagsResponse, GetOrganizationUsersResponse, GetOrganizationsResponse, GetOrganizationsUserPermissionsResponse, GetOrganizationsUserRolesResponse, Organization, SuccessResponse, UpdateOrganizationRequest, UpdateOrganizationUsersRequest, UpdateOrganizationUsersResponse } from '../models/index.js';
export interface AddOrganizationUsersOperationRequest {
    orgCode: string;
    addOrganizationUsersRequest?: AddOrganizationUsersRequest;
}
export interface CreateOrganizationOperationRequest {
    createOrganizationRequest?: CreateOrganizationRequest;
}
export interface CreateOrganizationUserPermissionOperationRequest {
    orgCode: string;
    userId: string;
    createOrganizationUserPermissionRequest: CreateOrganizationUserPermissionRequest;
}
export interface CreateOrganizationUserRoleOperationRequest {
    orgCode: string;
    userId: string;
    createOrganizationUserRoleRequest: CreateOrganizationUserRoleRequest;
}
export interface DeleteOrganizationRequest {
    orgCode: string;
}
export interface DeleteOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
}
export interface DeleteOrganizationFeatureFlagOverridesRequest {
    orgCode: string;
}
export interface DeleteOrganizationUserPermissionRequest {
    orgCode: string;
    userId: string;
    permissionId: string;
}
export interface DeleteOrganizationUserRoleRequest {
    orgCode: string;
    userId: string;
    roleId: string;
}
export interface GetOrganizationRequest {
    code?: string;
}
export interface GetOrganizationFeatureFlagsRequest {
    orgCode: string;
}
export interface GetOrganizationUserPermissionsRequest {
    orgCode: string;
    userId: string;
    expand?: string | null;
}
export interface GetOrganizationUserRolesRequest {
    orgCode: string;
    userId: string;
}
export interface GetOrganizationUsersRequest {
    orgCode: string;
    sort?: GetOrganizationUsersSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
    permissions?: string;
    roles?: string;
}
export interface GetOrganizationsRequest {
    sort?: GetOrganizationsSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
}
export interface RemoveOrganizationUserRequest {
    orgCode: string;
    userId: string;
}
export interface UpdateOrganizationOperationRequest {
    orgCode: string;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}
export interface UpdateOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
    value: string;
}
export interface UpdateOrganizationUsersOperationRequest {
    orgCode: string;
    updateOrganizationUsersRequest?: UpdateOrganizationUsersRequest;
}
/**
 *
 */
export declare class OrganizationsApi extends runtime.BaseAPI {
    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    addOrganizationUsersRaw(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationUsersResponse>>;
    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    addOrganizationUsers(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationUsersResponse>;
    /**
     * Create an organization.
     * Create Organization
     */
    createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganizationResponse>>;
    /**
     * Create an organization.
     * Create Organization
     */
    createOrganization(requestParameters?: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganizationResponse>;
    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    createOrganizationUserPermissionRaw(requestParameters: CreateOrganizationUserPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    createOrganizationUserPermission(requestParameters: CreateOrganizationUserPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    createOrganizationUserRoleRaw(requestParameters: CreateOrganizationUserRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    createOrganizationUserRole(requestParameters: CreateOrganizationUserRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Delete an organization.
     * Delete Organization
     */
    deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an organization.
     * Delete Organization
     */
    deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    deleteOrganizationFeatureFlagOverrideRaw(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    deleteOrganizationFeatureFlagOverride(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    deleteOrganizationFeatureFlagOverridesRaw(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    deleteOrganizationFeatureFlagOverrides(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    deleteOrganizationUserPermissionRaw(requestParameters: DeleteOrganizationUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    deleteOrganizationUserPermission(requestParameters: DeleteOrganizationUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    deleteOrganizationUserRoleRaw(requestParameters: DeleteOrganizationUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    deleteOrganizationUserRole(requestParameters: DeleteOrganizationUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Gets an organization given the organization\'s code.
     * Get Organization
     */
    getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>>;
    /**
     * Gets an organization given the organization\'s code.
     * Get Organization
     */
    getOrganization(requestParameters?: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization>;
    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    getOrganizationFeatureFlagsRaw(requestParameters: GetOrganizationFeatureFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationFeatureFlagsResponse>>;
    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    getOrganizationFeatureFlags(requestParameters: GetOrganizationFeatureFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationFeatureFlagsResponse>;
    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    getOrganizationUserPermissionsRaw(requestParameters: GetOrganizationUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsUserPermissionsResponse>>;
    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    getOrganizationUserPermissions(requestParameters: GetOrganizationUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsUserPermissionsResponse>;
    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    getOrganizationUserRolesRaw(requestParameters: GetOrganizationUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsUserRolesResponse>>;
    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    getOrganizationUserRoles(requestParameters: GetOrganizationUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsUserRolesResponse>;
    /**
     * Get users in an organization.
     * List Organization Users
     */
    getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationUsersResponse>>;
    /**
     * Get users in an organization.
     * List Organization Users
     */
    getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationUsersResponse>;
    /**
     * Get a list of organizations.
     * List Organizations
     */
    getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsResponse>>;
    /**
     * Get a list of organizations.
     * List Organizations
     */
    getOrganizations(requestParameters?: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsResponse>;
    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    removeOrganizationUserRaw(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    removeOrganizationUser(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update an organization.
     * Update Organization
     */
    updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Update an organization.
     * Update Organization
     */
    updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    updateOrganizationFeatureFlagOverrideRaw(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    updateOrganizationFeatureFlagOverride(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    updateOrganizationUsersRaw(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationUsersResponse>>;
    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    updateOrganizationUsers(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationUsersResponse>;
}
/**
 * @export
 */
export declare const GetOrganizationUsersSortEnum: {
    readonly NameAsc: "name_asc";
    readonly NameDesc: "name_desc";
    readonly EmailAsc: "email_asc";
    readonly EmailDesc: "email_desc";
};
export type GetOrganizationUsersSortEnum = typeof GetOrganizationUsersSortEnum[keyof typeof GetOrganizationUsersSortEnum];
/**
 * @export
 */
export declare const GetOrganizationsSortEnum: {
    readonly NameAsc: "name_asc";
    readonly NameDesc: "name_desc";
    readonly EmailAsc: "email_asc";
    readonly EmailDesc: "email_desc";
};
export type GetOrganizationsSortEnum = typeof GetOrganizationsSortEnum[keyof typeof GetOrganizationsSortEnum];
