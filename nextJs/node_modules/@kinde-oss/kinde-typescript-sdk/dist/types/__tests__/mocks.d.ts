/// <reference types="jest" />
import { type SessionManager } from '../sdk/session-managers';
export declare const fetchClient: jest.Mock<any, any, any>;
export declare const getMockAccessToken: (domain?: string, isExpired?: boolean) => {
    token: string;
    payload: {
        aud: string[];
        azp: string;
        exp: number;
        gty: string[];
        iat: number;
        iss: string;
        org_code: string;
        scp: string[];
        permissions: string[];
        jti: string;
        sub: string;
        feature_flags: {
            is_dark_mode: {
                t: string;
                v: boolean;
            };
            competitions_limit: {
                t: string;
                v: number;
            };
            theme: {
                t: string;
                v: string;
            };
        };
    };
};
export declare const getMockIdToken: (domain?: string, isExpired?: boolean) => {
    token: string;
    payload: {
        at_hash: string;
        aud: string[];
        auth_time: number;
        azp: string;
        email: string;
        exp: number;
        family_name: string;
        given_name: string;
        iat: number;
        iss: string;
        jti: string;
        name: string;
        org_codes: string[];
        sub: string;
        updated_at: number;
    };
};
declare class ServerSessionManager implements SessionManager {
    private memCache;
    destroySession(): Promise<void>;
    getSessionItem(itemKey: string): Promise<{} | null>;
    setSessionItem(itemKey: string, itemValue: unknown): Promise<void>;
    removeSessionItem(itemKey: string): Promise<void>;
}
export declare const sessionManager: ServerSessionManager;
export {};
