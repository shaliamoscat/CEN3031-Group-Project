/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CreateApplicationRequestToJSON, CreateApplicationResponseFromJSON, GetApplicationResponseFromJSON, GetApplicationsResponseFromJSON, SuccessResponseFromJSON, UpdateApplicationRequestToJSON, } from '../models/index.js';
/**
 *
 */
export class ApplicationsApi extends runtime.BaseAPI {
    /**
     * Create an application.
     * Create Application
     */
    async createApplicationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationRequestToJSON(requestParameters.createApplicationRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApplicationResponseFromJSON(jsonValue));
    }
    /**
     * Create an application.
     * Create Application
     */
    async createApplication(requestParameters = {}, initOverrides) {
        const response = await this.createApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete application.
     * Delete Application
     */
    async deleteApplicationRaw(requestParameters, initOverrides) {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId', 'Required parameter requestParameters.applicationId was null or undefined when calling deleteApplication.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{application_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete application.
     * Delete Application
     */
    async deleteApplication(requestParameters, initOverrides) {
        const response = await this.deleteApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets an application given the application\'s id.
     * Get Application
     */
    async getApplicationRaw(requestParameters, initOverrides) {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId', 'Required parameter requestParameters.applicationId was null or undefined when calling getApplication.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{application_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationResponseFromJSON(jsonValue));
    }
    /**
     * Gets an application given the application\'s id.
     * Get Application
     */
    async getApplication(requestParameters, initOverrides) {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a list of applications.
     * List Applications
     */
    async getApplicationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationsResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of applications.
     * List Applications
     */
    async getApplications(requestParameters = {}, initOverrides) {
        const response = await this.getApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update an application.
     * Update Application
     */
    async updateApplicationRaw(requestParameters, initOverrides) {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId', 'Required parameter requestParameters.applicationId was null or undefined when calling updateApplication.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{application_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationRequestToJSON(requestParameters.updateApplicationRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Update an application.
     * Update Application
     */
    async updateApplication(requestParameters, initOverrides) {
        await this.updateApplicationRaw(requestParameters, initOverrides);
    }
}
/**
 * @export
 */
export const GetApplicationsSortEnum = {
    Asc: 'name_asc',
    Desc: 'name_desc'
};
