/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CreatePermissionRequestToJSON, GetPermissionsResponseFromJSON, SuccessResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class PermissionsApi extends runtime.BaseAPI {
    /**
     * Create a new permission.
     * Create Permission
     */
    async createPermissionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/permissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionRequestToJSON(requestParameters.createPermissionRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Create a new permission.
     * Create Permission
     */
    async createPermission(requestParameters = {}, initOverrides) {
        const response = await this.createPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete permission
     * Delete Permission
     */
    async deletePermissionRaw(requestParameters, initOverrides) {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId', 'Required parameter requestParameters.permissionId was null or undefined when calling deletePermission.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete permission
     * Delete Permission
     */
    async deletePermission(requestParameters, initOverrides) {
        const response = await this.deletePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The returned list can be sorted by permission name or permission ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Permissions
     */
    async getPermissionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetPermissionsResponseFromJSON(jsonValue));
    }
    /**
     * The returned list can be sorted by permission name or permission ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Permissions
     */
    async getPermissions(requestParameters = {}, initOverrides) {
        const response = await this.getPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update permission
     * Update Permission
     */
    async updatePermissionsRaw(requestParameters, initOverrides) {
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId', 'Required parameter requestParameters.permissionId was null or undefined when calling updatePermissions.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionRequestToJSON(requestParameters.createPermissionRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Update permission
     * Update Permission
     */
    async updatePermissions(requestParameters, initOverrides) {
        const response = await this.updatePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const GetPermissionsSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
};
