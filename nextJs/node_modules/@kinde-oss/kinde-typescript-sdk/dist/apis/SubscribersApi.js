/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CreateSubscriberSuccessResponseFromJSON, GetSubscriberResponseFromJSON, GetSubscribersResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class SubscribersApi extends runtime.BaseAPI {
    /**
     * Create subscriber.
     * Create Subscriber
     */
    async createSubscriberRaw(requestParameters, initOverrides) {
        if (requestParameters.firstName === null || requestParameters.firstName === undefined) {
            throw new runtime.RequiredError('firstName', 'Required parameter requestParameters.firstName was null or undefined when calling createSubscriber.');
        }
        if (requestParameters.lastName === null || requestParameters.lastName === undefined) {
            throw new runtime.RequiredError('lastName', 'Required parameter requestParameters.lastName was null or undefined when calling createSubscriber.');
        }
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling createSubscriber.');
        }
        const queryParameters = {};
        if (requestParameters.firstName !== undefined) {
            queryParameters['first_name'] = requestParameters.firstName;
        }
        if (requestParameters.lastName !== undefined) {
            queryParameters['last_name'] = requestParameters.lastName;
        }
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscribers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriberSuccessResponseFromJSON(jsonValue));
    }
    /**
     * Create subscriber.
     * Create Subscriber
     */
    async createSubscriber(requestParameters, initOverrides) {
        const response = await this.createSubscriberRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a subscriber record.
     * Get Subscriber
     */
    async getSubscriberRaw(requestParameters, initOverrides) {
        if (requestParameters.subscriberId === null || requestParameters.subscriberId === undefined) {
            throw new runtime.RequiredError('subscriberId', 'Required parameter requestParameters.subscriberId was null or undefined when calling getSubscriber.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscribers/{subscriber_id}`.replace(`{${"subscriber_id"}}`, encodeURIComponent(String(requestParameters.subscriberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriberResponseFromJSON(jsonValue));
    }
    /**
     * Retrieve a subscriber record.
     * Get Subscriber
     */
    async getSubscriber(requestParameters, initOverrides) {
        const response = await this.getSubscriberRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Subscribers
     */
    async getSubscribersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscribers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscribersResponseFromJSON(jsonValue));
    }
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Subscribers
     */
    async getSubscribers(requestParameters = {}, initOverrides) {
        const response = await this.getSubscribersRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const GetSubscribersSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
};
