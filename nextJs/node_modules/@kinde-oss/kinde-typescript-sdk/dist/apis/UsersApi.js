/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CreateUserRequestToJSON, CreateUserResponseFromJSON, SuccessResponseFromJSON, UpdateUserRequestToJSON, UpdateUserResponseFromJSON, UserFromJSON, UsersResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
    /**
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
     * Create User
     */
    async createUserRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.createUserRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserResponseFromJSON(jsonValue));
    }
    /**
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
     * Create User
     */
    async createUser(requestParameters = {}, initOverrides) {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete a user record.
     * Delete User
     */
    async deleteUserRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.isDeleteProfile !== undefined) {
            queryParameters['is_delete_profile'] = requestParameters.isDeleteProfile;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete a user record.
     * Delete User
     */
    async deleteUser(requestParameters, initOverrides) {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a user record.
     * Get User
     */
    async getUserDataRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUserData.');
        }
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }
    /**
     * Retrieve a user record.
     * Get User
     */
    async getUserData(requestParameters, initOverrides) {
        const response = await this.getUserDataRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Users
     */
    async getUsersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponseFromJSON(jsonValue));
    }
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Users
     */
    async getUsers(requestParameters = {}, initOverrides) {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Refreshes the user\'s claims and invalidates the current cache.
     * Refresh User Claims and Invalidate Cache
     */
    async refreshUserClaimsRaw(requestParameters, initOverrides) {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling refreshUserClaims.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{user_id}/refresh_claims`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Refreshes the user\'s claims and invalidates the current cache.
     * Refresh User Claims and Invalidate Cache
     */
    async refreshUserClaims(requestParameters, initOverrides) {
        const response = await this.refreshUserClaimsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update a user record.
     * Update User
     */
    async updateUserRaw(requestParameters, initOverrides) {
        if (requestParameters.updateUserRequest === null || requestParameters.updateUserRequest === undefined) {
            throw new runtime.RequiredError('updateUserRequest', 'Required parameter requestParameters.updateUserRequest was null or undefined when calling updateUser.');
        }
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters.updateUserRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserResponseFromJSON(jsonValue));
    }
    /**
     * Update a user record.
     * Update User
     */
    async updateUser(requestParameters, initOverrides) {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const GetUsersSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
};
