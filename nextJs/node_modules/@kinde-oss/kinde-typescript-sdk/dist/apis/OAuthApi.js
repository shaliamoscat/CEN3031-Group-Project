/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { TokenIntrospectFromJSON, UserProfileFromJSON, UserProfileV2FromJSON, } from '../models/index.js';
/**
 *
 */
export class OAuthApi extends runtime.BaseAPI {
    /**
     * Contains the id, names and email of the currently logged in user.
     * Get User Profile
     */
    async getUserRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth2/user_profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }
    /**
     * Contains the id, names and email of the currently logged in user.
     * Get User Profile
     */
    async getUser(initOverrides) {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }
    /**
     * Contains the id, names, profile picture URL and email of the currently logged in user.
     * Returns the details of the currently logged in user
     */
    async getUserProfileV2Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth2/v2/user_profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileV2FromJSON(jsonValue));
    }
    /**
     * Contains the id, names, profile picture URL and email of the currently logged in user.
     * Returns the details of the currently logged in user
     */
    async getUserProfileV2(initOverrides) {
        const response = await this.getUserProfileV2Raw(initOverrides);
        return await response.value();
    }
    /**
     * Retrieve information about the provided token.
     * Get token details
     */
    async tokenIntrospectionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.token !== undefined) {
            formParams.append('token', requestParameters.token);
        }
        if (requestParameters.tokenType !== undefined) {
            formParams.append('token_type', requestParameters.tokenType);
        }
        const response = await this.request({
            path: `/oauth2/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => TokenIntrospectFromJSON(jsonValue));
    }
    /**
     * Retrieve information about the provided token.
     * Get token details
     */
    async tokenIntrospection(requestParameters = {}, initOverrides) {
        const response = await this.tokenIntrospectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Revoke a previously issued token.
     * Revoke token
     */
    async tokenRevocationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.token !== undefined) {
            formParams.append('token', requestParameters.token);
        }
        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId);
        }
        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret);
        }
        const response = await this.request({
            path: `/oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Revoke a previously issued token.
     * Revoke token
     */
    async tokenRevocation(requestParameters = {}, initOverrides) {
        await this.tokenRevocationRaw(requestParameters, initOverrides);
    }
}
