/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { AddAPIsRequestToJSON, ApiFromJSON, ApisFromJSON, SuccessResponseFromJSON, UpdateAPIApplicationsRequestToJSON, } from '../models/index.js';
/**
 *
 */
export class APIsApi extends runtime.BaseAPI {
    /**
     * Add APIs.
     * Add APIs
     */
    async addAPIsRaw(requestParameters, initOverrides) {
        if (requestParameters.addAPIsRequest === null || requestParameters.addAPIsRequest === undefined) {
            throw new runtime.RequiredError('addAPIsRequest', 'Required parameter requestParameters.addAPIsRequest was null or undefined when calling addAPIs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/apis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAPIsRequestToJSON(requestParameters.addAPIsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Add APIs.
     * Add APIs
     */
    async addAPIs(requestParameters, initOverrides) {
        const response = await this.addAPIsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Deletes API.
     * Delete API
     */
    async deleteAPIRaw(requestParameters, initOverrides) {
        if (requestParameters.apiId === null || requestParameters.apiId === undefined) {
            throw new runtime.RequiredError('apiId', 'Required parameter requestParameters.apiId was null or undefined when calling deleteAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/apis/{api_id}`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters.apiId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Deletes API.
     * Delete API
     */
    async deleteAPI(requestParameters, initOverrides) {
        const response = await this.deleteAPIRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the details of the API.
     * List API details
     */
    async getAPIRaw(requestParameters, initOverrides) {
        if (requestParameters.apiId === null || requestParameters.apiId === undefined) {
            throw new runtime.RequiredError('apiId', 'Required parameter requestParameters.apiId was null or undefined when calling getAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/apis/{api_id}`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters.apiId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiFromJSON(jsonValue));
    }
    /**
     * Returns the details of the API.
     * List API details
     */
    async getAPI(requestParameters, initOverrides) {
        const response = await this.getAPIRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of APIs.
     * List APIs
     */
    async getAPIsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/apis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApisFromJSON(jsonValue));
    }
    /**
     * Returns a list of APIs.
     * List APIs
     */
    async getAPIs(initOverrides) {
        const response = await this.getAPIsRaw(initOverrides);
        return await response.value();
    }
    /**
     * Update the applications under that API.
     * Update API Applications
     */
    async updateAPIApplicationsRaw(requestParameters, initOverrides) {
        if (requestParameters.apiId === null || requestParameters.apiId === undefined) {
            throw new runtime.RequiredError('apiId', 'Required parameter requestParameters.apiId was null or undefined when calling updateAPIApplications.');
        }
        if (requestParameters.updateAPIApplicationsRequest === null || requestParameters.updateAPIApplicationsRequest === undefined) {
            throw new runtime.RequiredError('updateAPIApplicationsRequest', 'Required parameter requestParameters.updateAPIApplicationsRequest was null or undefined when calling updateAPIApplications.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/apis/{api_id}/applications`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters.apiId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPIApplicationsRequestToJSON(requestParameters.updateAPIApplicationsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Update the applications under that API.
     * Update API Applications
     */
    async updateAPIApplications(requestParameters, initOverrides) {
        const response = await this.updateAPIApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
