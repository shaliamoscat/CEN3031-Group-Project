/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { LogoutRedirectUrlsFromJSON, RedirectCallbackUrlsFromJSON, ReplaceLogoutRedirectURLsRequestToJSON, ReplaceRedirectCallbackURLsRequestToJSON, SuccessResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class CallbacksApi extends runtime.BaseAPI {
    /**
     * Add additional logout redirect URLs.
     * Add Logout Redirect URLs
     */
    async addLogoutRedirectURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling addLogoutRedirectURLs.');
        }
        if (requestParameters.replaceLogoutRedirectURLsRequest === null || requestParameters.replaceLogoutRedirectURLsRequest === undefined) {
            throw new runtime.RequiredError('replaceLogoutRedirectURLsRequest', 'Required parameter requestParameters.replaceLogoutRedirectURLsRequest was null or undefined when calling addLogoutRedirectURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceLogoutRedirectURLsRequestToJSON(requestParameters.replaceLogoutRedirectURLsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Add additional logout redirect URLs.
     * Add Logout Redirect URLs
     */
    async addLogoutRedirectURLs(requestParameters, initOverrides) {
        const response = await this.addLogoutRedirectURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add additional redirect callback URLs.
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling addRedirectCallbackURLs.');
        }
        if (requestParameters.replaceRedirectCallbackURLsRequest === null || requestParameters.replaceRedirectCallbackURLsRequest === undefined) {
            throw new runtime.RequiredError('replaceRedirectCallbackURLsRequest', 'Required parameter requestParameters.replaceRedirectCallbackURLsRequest was null or undefined when calling addRedirectCallbackURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceRedirectCallbackURLsRequestToJSON(requestParameters.replaceRedirectCallbackURLsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Add additional redirect callback URLs.
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLs(requestParameters, initOverrides) {
        const response = await this.addRedirectCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete callback URLs.
     * Delete Callback URLs
     */
    async deleteCallbackURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling deleteCallbackURLs.');
        }
        if (requestParameters.urls === null || requestParameters.urls === undefined) {
            throw new runtime.RequiredError('urls', 'Required parameter requestParameters.urls was null or undefined when calling deleteCallbackURLs.');
        }
        const queryParameters = {};
        if (requestParameters.urls !== undefined) {
            queryParameters['urls'] = requestParameters.urls;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete callback URLs.
     * Delete Callback URLs
     */
    async deleteCallbackURLs(requestParameters, initOverrides) {
        const response = await this.deleteCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete logout URLs.
     * Delete Logout URLs
     */
    async deleteLogoutURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling deleteLogoutURLs.');
        }
        if (requestParameters.urls === null || requestParameters.urls === undefined) {
            throw new runtime.RequiredError('urls', 'Required parameter requestParameters.urls was null or undefined when calling deleteLogoutURLs.');
        }
        const queryParameters = {};
        if (requestParameters.urls !== undefined) {
            queryParameters['urls'] = requestParameters.urls;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete logout URLs.
     * Delete Logout URLs
     */
    async deleteLogoutURLs(requestParameters, initOverrides) {
        const response = await this.deleteLogoutURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns an application\'s redirect callback URLs.
     * List Callback URLs
     */
    async getCallbackURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getCallbackURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectCallbackUrlsFromJSON(jsonValue));
    }
    /**
     * Returns an application\'s redirect callback URLs.
     * List Callback URLs
     */
    async getCallbackURLs(requestParameters, initOverrides) {
        const response = await this.getCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns an application\'s logout redirect URLs.
     * List Logout URLs
     */
    async getLogoutURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getLogoutURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutRedirectUrlsFromJSON(jsonValue));
    }
    /**
     * Returns an application\'s logout redirect URLs.
     * List Logout URLs
     */
    async getLogoutURLs(requestParameters, initOverrides) {
        const response = await this.getLogoutURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Replace all logout redirect URLs.
     * Replace Logout Redirect URLs
     */
    async replaceLogoutRedirectURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling replaceLogoutRedirectURLs.');
        }
        if (requestParameters.replaceLogoutRedirectURLsRequest === null || requestParameters.replaceLogoutRedirectURLsRequest === undefined) {
            throw new runtime.RequiredError('replaceLogoutRedirectURLsRequest', 'Required parameter requestParameters.replaceLogoutRedirectURLsRequest was null or undefined when calling replaceLogoutRedirectURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceLogoutRedirectURLsRequestToJSON(requestParameters.replaceLogoutRedirectURLsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Replace all logout redirect URLs.
     * Replace Logout Redirect URLs
     */
    async replaceLogoutRedirectURLs(requestParameters, initOverrides) {
        const response = await this.replaceLogoutRedirectURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Replace all redirect callback URLs.
     * Replace Redirect Callback URLs
     */
    async replaceRedirectCallbackURLsRaw(requestParameters, initOverrides) {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling replaceRedirectCallbackURLs.');
        }
        if (requestParameters.replaceRedirectCallbackURLsRequest === null || requestParameters.replaceRedirectCallbackURLsRequest === undefined) {
            throw new runtime.RequiredError('replaceRedirectCallbackURLsRequest', 'Required parameter requestParameters.replaceRedirectCallbackURLsRequest was null or undefined when calling replaceRedirectCallbackURLs.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceRedirectCallbackURLsRequestToJSON(requestParameters.replaceRedirectCallbackURLsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Replace all redirect callback URLs.
     * Replace Redirect Callback URLs
     */
    async replaceRedirectCallbackURLs(requestParameters, initOverrides) {
        const response = await this.replaceRedirectCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
