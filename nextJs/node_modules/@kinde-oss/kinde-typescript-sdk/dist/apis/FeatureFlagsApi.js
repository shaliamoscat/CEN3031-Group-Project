/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CreateFeatureFlagRequestToJSON, SuccessResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class FeatureFlagsApi extends runtime.BaseAPI {
    /**
     * Create feature flag.
     * Create Feature Flag
     */
    async createFeatureFlagRaw(requestParameters, initOverrides) {
        if (requestParameters.createFeatureFlagRequest === null || requestParameters.createFeatureFlagRequest === undefined) {
            throw new runtime.RequiredError('createFeatureFlagRequest', 'Required parameter requestParameters.createFeatureFlagRequest was null or undefined when calling createFeatureFlag.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureFlagRequestToJSON(requestParameters.createFeatureFlagRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Create feature flag.
     * Create Feature Flag
     */
    async createFeatureFlag(requestParameters, initOverrides) {
        const response = await this.createFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete feature flag
     * Delete Feature Flag
     */
    async deleteFeatureFlagRaw(requestParameters, initOverrides) {
        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey', 'Required parameter requestParameters.featureFlagKey was null or undefined when calling deleteFeatureFlag.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags/{feature_flag_key}`.replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete feature flag
     * Delete Feature Flag
     */
    async deleteFeatureFlag(requestParameters, initOverrides) {
        const response = await this.deleteFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update feature flag.
     * Replace Feature Flag
     */
    async updateFeatureFlagRaw(requestParameters, initOverrides) {
        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey', 'Required parameter requestParameters.featureFlagKey was null or undefined when calling updateFeatureFlag.');
        }
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling updateFeatureFlag.');
        }
        if (requestParameters.description === null || requestParameters.description === undefined) {
            throw new runtime.RequiredError('description', 'Required parameter requestParameters.description was null or undefined when calling updateFeatureFlag.');
        }
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling updateFeatureFlag.');
        }
        if (requestParameters.allowOverrideLevel === null || requestParameters.allowOverrideLevel === undefined) {
            throw new runtime.RequiredError('allowOverrideLevel', 'Required parameter requestParameters.allowOverrideLevel was null or undefined when calling updateFeatureFlag.');
        }
        if (requestParameters.defaultValue === null || requestParameters.defaultValue === undefined) {
            throw new runtime.RequiredError('defaultValue', 'Required parameter requestParameters.defaultValue was null or undefined when calling updateFeatureFlag.');
        }
        const queryParameters = {};
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.allowOverrideLevel !== undefined) {
            queryParameters['allow_override_level'] = requestParameters.allowOverrideLevel;
        }
        if (requestParameters.defaultValue !== undefined) {
            queryParameters['default_value'] = requestParameters.defaultValue;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags/{feature_flag_key}`.replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Update feature flag.
     * Replace Feature Flag
     */
    async updateFeatureFlag(requestParameters, initOverrides) {
        const response = await this.updateFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const UpdateFeatureFlagTypeEnum = {
    Str: 'str',
    Int: 'int',
    Bool: 'bool'
};
/**
 * @export
 */
export const UpdateFeatureFlagAllowOverrideLevelEnum = {
    Env: 'env',
    Org: 'org'
};
