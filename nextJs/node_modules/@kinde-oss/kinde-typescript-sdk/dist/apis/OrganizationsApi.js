/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { AddOrganizationUsersRequestToJSON, AddOrganizationUsersResponseFromJSON, CreateOrganizationRequestToJSON, CreateOrganizationResponseFromJSON, CreateOrganizationUserPermissionRequestToJSON, CreateOrganizationUserRoleRequestToJSON, GetOrganizationFeatureFlagsResponseFromJSON, GetOrganizationUsersResponseFromJSON, GetOrganizationsResponseFromJSON, GetOrganizationsUserPermissionsResponseFromJSON, GetOrganizationsUserRolesResponseFromJSON, OrganizationFromJSON, SuccessResponseFromJSON, UpdateOrganizationRequestToJSON, UpdateOrganizationUsersRequestToJSON, UpdateOrganizationUsersResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class OrganizationsApi extends runtime.BaseAPI {
    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    async addOrganizationUsersRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling addOrganizationUsers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationUsersRequestToJSON(requestParameters.addOrganizationUsersRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationUsersResponseFromJSON(jsonValue));
    }
    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    async addOrganizationUsers(requestParameters, initOverrides) {
        const response = await this.addOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganizationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestToJSON(requestParameters.createOrganizationRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganizationResponseFromJSON(jsonValue));
    }
    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganization(requestParameters = {}, initOverrides) {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    async createOrganizationUserPermissionRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling createOrganizationUserPermission.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling createOrganizationUserPermission.');
        }
        if (requestParameters.createOrganizationUserPermissionRequest === null || requestParameters.createOrganizationUserPermissionRequest === undefined) {
            throw new runtime.RequiredError('createOrganizationUserPermissionRequest', 'Required parameter requestParameters.createOrganizationUserPermissionRequest was null or undefined when calling createOrganizationUserPermission.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationUserPermissionRequestToJSON(requestParameters.createOrganizationUserPermissionRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    async createOrganizationUserPermission(requestParameters, initOverrides) {
        const response = await this.createOrganizationUserPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    async createOrganizationUserRoleRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling createOrganizationUserRole.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling createOrganizationUserRole.');
        }
        if (requestParameters.createOrganizationUserRoleRequest === null || requestParameters.createOrganizationUserRoleRequest === undefined) {
            throw new runtime.RequiredError('createOrganizationUserRoleRequest', 'Required parameter requestParameters.createOrganizationUserRoleRequest was null or undefined when calling createOrganizationUserRole.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationUserRoleRequestToJSON(requestParameters.createOrganizationUserRoleRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    async createOrganizationUserRole(requestParameters, initOverrides) {
        const response = await this.createOrganizationUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete an organization.
     * Delete Organization
     */
    async deleteOrganizationRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganization.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{org_code}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Delete an organization.
     * Delete Organization
     */
    async deleteOrganization(requestParameters, initOverrides) {
        await this.deleteOrganizationRaw(requestParameters, initOverrides);
    }
    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    async deleteOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationFeatureFlagOverride.');
        }
        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey', 'Required parameter requestParameters.featureFlagKey was null or undefined when calling deleteOrganizationFeatureFlagOverride.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    async deleteOrganizationFeatureFlagOverride(requestParameters, initOverrides) {
        const response = await this.deleteOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    async deleteOrganizationFeatureFlagOverridesRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationFeatureFlagOverrides.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    async deleteOrganizationFeatureFlagOverrides(requestParameters, initOverrides) {
        const response = await this.deleteOrganizationFeatureFlagOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    async deleteOrganizationUserPermissionRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationUserPermission.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling deleteOrganizationUserPermission.');
        }
        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId', 'Required parameter requestParameters.permissionId was null or undefined when calling deleteOrganizationUserPermission.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    async deleteOrganizationUserPermission(requestParameters, initOverrides) {
        const response = await this.deleteOrganizationUserPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    async deleteOrganizationUserRoleRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationUserRole.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling deleteOrganizationUserRole.');
        }
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling deleteOrganizationUserRole.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    async deleteOrganizationUserRole(requestParameters, initOverrides) {
        const response = await this.deleteOrganizationUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Gets an organization given the organization\'s code.
     * Get Organization
     */
    async getOrganizationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }
    /**
     * Gets an organization given the organization\'s code.
     * Get Organization
     */
    async getOrganization(requestParameters = {}, initOverrides) {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    async getOrganizationFeatureFlagsRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling getOrganizationFeatureFlags.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationFeatureFlagsResponseFromJSON(jsonValue));
    }
    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    async getOrganizationFeatureFlags(requestParameters, initOverrides) {
        const response = await this.getOrganizationFeatureFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    async getOrganizationUserPermissionsRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling getOrganizationUserPermissions.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getOrganizationUserPermissions.');
        }
        const queryParameters = {};
        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsUserPermissionsResponseFromJSON(jsonValue));
    }
    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    async getOrganizationUserPermissions(requestParameters, initOverrides) {
        const response = await this.getOrganizationUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    async getOrganizationUserRolesRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling getOrganizationUserRoles.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getOrganizationUserRoles.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsUserRolesResponseFromJSON(jsonValue));
    }
    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    async getOrganizationUserRoles(requestParameters, initOverrides) {
        const response = await this.getOrganizationUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsersRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling getOrganizationUsers.');
        }
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        if (requestParameters.permissions !== undefined) {
            queryParameters['permissions'] = requestParameters.permissions;
        }
        if (requestParameters.roles !== undefined) {
            queryParameters['roles'] = requestParameters.roles;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationUsersResponseFromJSON(jsonValue));
    }
    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsers(requestParameters, initOverrides) {
        const response = await this.getOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a list of organizations.
     * List Organizations
     */
    async getOrganizationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }
        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of organizations.
     * List Organizations
     */
    async getOrganizations(requestParameters = {}, initOverrides) {
        const response = await this.getOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    async removeOrganizationUserRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling removeOrganizationUser.');
        }
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling removeOrganizationUser.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    async removeOrganizationUser(requestParameters, initOverrides) {
        const response = await this.removeOrganizationUserRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganizationRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling updateOrganization.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{org_code}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters.updateOrganizationRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganization(requestParameters, initOverrides) {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    async updateOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }
        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey', 'Required parameter requestParameters.featureFlagKey was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }
        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value', 'Required parameter requestParameters.value was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }
        const queryParameters = {};
        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }
    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    async updateOrganizationFeatureFlagOverride(requestParameters, initOverrides) {
        const response = await this.updateOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    async updateOrganizationUsersRaw(requestParameters, initOverrides) {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode', 'Required parameter requestParameters.orgCode was null or undefined when calling updateOrganizationUsers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationUsersRequestToJSON(requestParameters.updateOrganizationUsersRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrganizationUsersResponseFromJSON(jsonValue));
    }
    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    async updateOrganizationUsers(requestParameters, initOverrides) {
        const response = await this.updateOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const GetOrganizationUsersSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
};
/**
 * @export
 */
export const GetOrganizationsSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
};
