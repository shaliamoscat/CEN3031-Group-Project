import { isBrowserEnvironment } from '../environment.js';
/**
 * Provides a session manager implementation for the browser.
 * @class BrowserSessionManager
 */
class BrowserSessionManager {
    static ITEM_NAME_PREFIX = 'browser-session-store@';
    memCache = {};
    constructor() {
        if (!isBrowserEnvironment()) {
            throw new Error('BrowserSessionStore must be instantiated on the browser');
        }
    }
    /**
     * Prefixes provided item key with class static prefix.
     * @param {string} itemKey
     * @returns {string}
     */
    generateItemKey(itemKey) {
        return `${BrowserSessionManager.ITEM_NAME_PREFIX}${itemKey}`;
    }
    /**
     * Clears all items from session store.
     * @returns {void}
     */
    async destroySession() {
        sessionStorage.clear();
        this.memCache = {};
    }
    /**
     * Sets the provided key-value store to the memory cache.
     * @param {string} itemKey
     * @param {unknown} itemValue
     * @returns {void}
     */
    async setSessionItem(itemKey, itemValue) {
        const key = this.generateItemKey(itemKey);
        this.memCache[key] = itemValue;
    }
    /**
     * Sets the provided key-value store to the browser session storage.
     * @param {string} itemKey
     * @param {unknown} itemValue
     */
    async setSessionItemBrowser(itemKey, itemValue) {
        const key = this.generateItemKey(itemKey);
        const isString = typeof itemValue === 'string';
        const value = !isString ? JSON.stringify(itemValue) : itemValue;
        sessionStorage.setItem(key, value);
    }
    /**
     * Gets the item for the provided key from the memory cache.
     * @param {string} itemKey
     * @returns {unknown | null}
     */
    async getSessionItem(itemKey) {
        const key = this.generateItemKey(itemKey);
        return this.memCache[key] ?? null;
    }
    /**
     * Gets the item for the provided key from the browser session storage.
     * @param {string} itemKey
     * @returns {unknown | null}
     */
    async getSessionItemBrowser(itemKey) {
        const key = this.generateItemKey(itemKey);
        return sessionStorage.getItem(key);
    }
    /**
     * Removes the item for the provided key from the memory cache.
     * @param {string} itemKey
     * @returns {void}
     */
    async removeSessionItem(itemKey) {
        const key = this.generateItemKey(itemKey);
        delete this.memCache[key];
    }
    /**
     * Removes the item for the provided key from the browser session storage.
     * @param {string} itemKey
     * @returns {void}
     */
    async removeSessionItemBrowser(itemKey) {
        const key = this.generateItemKey(itemKey);
        sessionStorage.removeItem(key);
    }
}
export { BrowserSessionManager };
