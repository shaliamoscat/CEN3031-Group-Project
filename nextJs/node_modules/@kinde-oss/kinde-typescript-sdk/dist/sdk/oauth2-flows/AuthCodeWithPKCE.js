import { isBrowserEnvironment } from '../environment.js';
import { AuthCodeAbstract } from './AuthCodeAbstract.js';
import * as utilities from '../utilities/index.js';
/**
 * Class provides implementation for the authorization code with PKCE extension
 * OAuth2.0 flow, please note the use of the `isBrowserEnvironment()` method
 * in certain methods of this class, this is because this class is intended to
 * be used on both the browser and server.
 * @class AuthCodeWithPKCE
 * @param {AuthorizationCodeOptions} config
 */
class AuthCodeWithPKCE extends AuthCodeAbstract {
    config;
    static STATE_KEY = 'acwpf-state-key';
    codeChallenge;
    codeVerifier;
    constructor(config) {
        super(config);
        this.config = config;
    }
    /**
     * Method provides implementation for `createAuthorizationURL` method mandated by
     * `AuthCodeAbstract` parent class, see corresponding comment in parent class for
     * further explanation.
     * @param {SessionManager} sessionManager
     * @param {AuthURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    async createAuthorizationURL(sessionManager, options = {}) {
        const challengeSetup = await utilities.setupCodeChallenge();
        const { challenge, verifier } = challengeSetup;
        this.codeChallenge = challenge;
        this.codeVerifier = verifier;
        this.state = options.state ?? utilities.generateRandomString();
        const setItem = isBrowserEnvironment()
            ? sessionManager
                .setSessionItemBrowser
            : sessionManager.setSessionItem;
        await setItem.call(sessionManager, this.getCodeVerifierKey(this.state), JSON.stringify({ codeVerifier: this.codeVerifier }));
        const authURL = new URL(this.authorizationEndpoint);
        const authParams = this.generateAuthURLParams(options);
        authURL.search = authParams.toString();
        return authURL;
    }
    /**
     * Method provides implementation for `refreshTokens` method mandated by
     * `AuthCodeAbstract` parent class, see corresponding comment in parent class for
     * further explanation.
     * @param {SessionManager} sessionManager
     * @returns {Promise<OAuth2CodeExchangeResponse>}
     */
    async refreshTokens(sessionManager) {
        const refreshToken = await utilities.getRefreshToken(sessionManager);
        const body = new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: refreshToken,
            client_id: this.config.clientId,
        });
        const tokens = await this.fetchTokensFor(sessionManager, body, true);
        await utilities.commitTokensToMemory(sessionManager, tokens);
        return tokens;
    }
    /**
     * Method provides implementation for `exchangeAuthCodeForTokens` method mandated
     * by `AuthCodeAbstract` parent class, see corresponding comment in parent class
     * for further explanation.
     * @param {SessionManager} sessionManager
     * @param {URL} callbackURL
     * @returns {Promise<OAuth2CodeExchangeResponse>}
     */
    async exchangeAuthCodeForTokens(sessionManager, callbackURL) {
        const [code, state] = super.getCallbackURLParams(callbackURL);
        const storedStateKey = this.getCodeVerifierKey(state);
        if (!storedStateKey?.endsWith(state)) {
            throw new Error('Received state does not match stored state');
        }
        const getItem = isBrowserEnvironment()
            ? sessionManager
                .getSessionItemBrowser
            : sessionManager.getSessionItem;
        const storedState = (await getItem.call(sessionManager, storedStateKey));
        if (!storedState) {
            throw new Error('Stored state not found');
        }
        const authFlowState = JSON.parse(storedState);
        this.codeVerifier = authFlowState.codeVerifier;
        const body = new URLSearchParams({
            redirect_uri: this.config.redirectURL,
            client_id: this.config.clientId,
            code_verifier: this.codeVerifier,
            grant_type: 'authorization_code',
            code,
        });
        const removeItem = isBrowserEnvironment()
            ? sessionManager
                .removeSessionItemBrowser
            : sessionManager.removeSessionItem;
        try {
            return await this.fetchTokensFor(sessionManager, body);
        }
        finally {
            await removeItem.call(sessionManager, this.getCodeVerifierKey(state));
        }
    }
    /**
     * Method generates the key against which the code verifier is stored in session
     * storage.
     * @param {string} state
     * @returns {string} - required code verifer key
     */
    getCodeVerifierKey(state) {
        return `${AuthCodeWithPKCE.STATE_KEY}-${state}`;
    }
    /**
     * Method provides implementation for `getBaseAuthURLParams` method mandated by
     * `AuthCodeAbstract` parent class, see corresponding comment in parent class
     * for further explanation.
     * @returns {URLSearchParams} Required query parameters
     */
    getBaseAuthURLParams() {
        return new URLSearchParams({
            state: this.state,
            client_id: this.config.clientId,
            redirect_uri: this.config.redirectURL,
            response_type: 'code',
            code_challenge: this.codeChallenge,
            code_challenge_method: 'S256',
        });
    }
}
export { AuthCodeWithPKCE };
